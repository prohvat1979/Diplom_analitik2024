import pandas as pd

# Определяем вопросы и варианты ответов
questions = [
    {
        "question": "1. Как вы предпочитаете действовать в сложных ситуациях?",
        "options": ["a) Прямо и решительно", "b) Обсуждая с командой", "c) Спокойно и последовательно",
                    "d) Анализируя детали"]
    },
    {
        "question": "2. В разговоре вам важнее:",
        "options": ["a) Быть лидером", "b) Убедить людей", "c) Поддерживать дружескую атмосферу",
                    "d) Будьте точными и логичными"]
    },
    {
        "question": "3. В рабочей среде вы:",
        "options": ["a) Любите брать на себя ответственность", "b) Предпочитаете сотрудничество",
                    "c) Стремитесь к стабильности", "d) Ориентируетесь на качество"]
    },
    {
        "question": "4. Как вы относитесь к изменениям?",
        "options": ["a) С энтузиазмом", "b) Принимаю их, если это нужно", "c) Предпочитаю стабильность",
                    "d) Оцениваю риски перед принятием решения"]
    },
    {
        "question": "5. Ваша главная ценность в работе:",
        "options": ["a) Достижение результатов", "b) Командный дух", "c) Уважение к людям",
                    "d) Точность и профессионализм"]
    },
    {
        "question": "6. Как вы обычно принимаете решения?",
        "options": ["a) Быстро", "b) Обсуждаю с другими", "c) Долго взвешиваю все за и против",
                    "d) На основе фактов и данных"]
    },
    {
        "question": "7. В трудных ситуациях вы:",
        "options": ["a) Беретесь за дело", "b) Предлагаете помощь окружающим", "c) Сохраняете спокойствие",
                    "d) Анализируете проблему"]
    },
    {
        "question": "8. Как вы общаетесь с коллегами?",
        "options": ["a) Прямо и открыто", "b) Дружелюбно и оживленно", "c) Вежливо и настойчиво",
                    "d) Сдержанно и точно"]
    },
    {
        "question": "9. Как вы воспринимаете критику?",
        "options": ["a) Как вызов", "b) Это меня расстраивает", "c) Спокойно, но я обдумываю",
                    "d) Принимаю конструктивно"]
    },
    {
        "question": "10. Каковы ваши предпочтения в работе?",
        "options": ["a) Работать самостоятельно", "b) Работать в команде", "c) Предпочитаю стабильную обстановку",
                    "d) Работа с деталями"]
    },
    {
        "question": "11. В проекте вы хотите быть:",
        "options": ["a) Ведущим", "b) Мотиватором", "c) Поддержкой всего коллектива", "d) Экспертом"]
    },
    {
        "question": "12. Ваша реакция на стресс:",
        "options": ["a) Упорно работаю", "b) Обсуждаю с друзьями", "c) Ищу успокоения",
                    "d) Систематически решаю проблемы"]
    },
    {
        "question": "13. Вы предпочитаете:",
        "options": ["a) Быть в центре событий", "b) Окружать себя людьми",
                    "c) Чувствую себя комфортно в одиночных заданиях", "d) Работать по плану"]
    },
    {
        "question": "14. Как вы относитесь к рискам?",
        "options": ["a) Готов рисковать", "b) Нам необходимо обсудить", "c) Избегаю их", "d) Оцениваю на основе данных"]
    },
    {
        "question": "15. Ваша мотивация на работе:",
        "options": ["a) Достижения", "b) Взаимоотношения", "c) Стабильность", "d) Профессионализм"]
    },
    {
        "question": "16. Как вы решаете конфликты?",
        "options": ["a) Быстро и эффективно", "b) Обсуждаю с обеими сторонами", "c) Ищу компромисс",
                    "d) Анализирую ситуацию"]
    },
    {
        "question": "17. Как вы относитесь к новому опыту?",
        "options": ["a) С удовольствием пробую", "b) С радостью делюсь", "c) Я остерегаюсь",
                    "d) Это требует обдумывания"]
    },
    {
        "question": "18. Как вы готовитесь к экзаменам или презентациям?",
        "options": ["a) Разрабатываю стратегию", "b) Прокладываю пути общения", "c) Спокойно изучаю материал",
                    "d) Подробно анализирую каждый аспект"]
    },
    {
        "question": "19. Ваша идеальная рабочая среда:",
        "options": ["a) Высокая динамика", "b) Дружелюбная атмосфера", "c) Устойчивость",
                    "d) Четкие правила и процедуры"]
    },
    {
        "question": "20. Как вы видите свое будущее?",
        "options": ["a) Большие достижения", "b) Развитие отношений", "c) Спокойствие и стабильность",
                    "d) Профессиональную компетентность"]
    },
]


# Функция для сбора ответов
def get_user_answers():
    answers = {"A": 0, "B": 0, "C": 0, "D": 0}
    print("Добро пожаловать в тест DISC!")

    # Проходим по всем вопросам
    for q in questions:
        print(q["question"])
        for option in q["options"]:
            print(option)
        # Сбор ответа пользователя
        while True:
            answer = input("Введите букву ответа (a/b/c/d): ").strip().upper()
            if answer in ['A', 'B', 'C', 'D']:
                answers[answer] += 1
                break
            else:
                print("Неверный ввод. Пожалуйста, введите a, b, c, или d.")

    return answers


# Функция для анализа результатов
def analyze_results(answers):
    # Определяем тип личности
    type_results = {
        "Dominance": answers["A"],
        "Influence": answers["B"],
        "Steadiness": answers["C"],
        "Conscientiousness": answers["D"],
    }

    # Ищем тип с максимальным количеством набранных баллов
    personality_type = max(type_results, key=type_results.get)

    return personality_type, type_results


# Функция для описания результата
def describe_personality(personality_type):
    descriptions = {
        "Dominance": "Вы - лидеры! Вы любите контролировать ситуацию и добиваться результатов. "
                     "Предпочитаете прямота и решительность.",
        "Influence": "Вы - общительные и яркие личности. Вам нравится быть в центре внимания и "
                     "вдохновлять окружающих.",
        "Steadiness": "Вы - стабильные и надежные. Цените спокойствие и порядок, всегда готовы поддержать других.",
        "Conscientiousness": "Вы - перфекционисты. Ориентируетесь на детали и высокое качество в своей работе.",
    }

    return descriptions[personality_type]


# Основная функция программы
def main():
    answers = get_user_answers()
    personality_type, type_results = analyze_results(answers)
    description = describe_personality(personality_type)

    print("\nРезультаты теста:")
    print(f"Ваш тип личности: {personality_type} ({type_results[personality_type]} баллов)")
    print("Описание:")
    print(description)


if __name__ == "__main__":
    main()